{
	"name": "Gold_df_BD_Location",
	"properties": {
		"folder": {
			"name": "GOLD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SILVER_sql_Clientes_BD_GEN",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SILVER_sql_Clientes_location",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CID as string,",
				"          fecha_nacimiento as date,",
				"          genero as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          CID as string,",
				"          pais as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"derivedColumn2, derivedColumn1 join(derivedColumn2@CID == NormalizeCID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          CID = source1@CID,",
				"          fecha_nacimiento,",
				"          CID = source2@CID,",
				"          pais",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 derive(NormalizeCID = upper(trim(replace(CID, \"-\", \"\")))\r",
				"\r",
				") ~> derivedColumn1",
				"source1 derive(CID = replace(replace(CID, \"NAS\", \"\"), \"AW\", \"AW\")) ~> derivedColumn2"
			]
		}
	}
}